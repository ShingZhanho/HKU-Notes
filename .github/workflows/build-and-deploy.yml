name: Build LaTeX PDFs and Deploy to GitHub Pages
on:
  push:
    branches:
      - master
jobs:

  configure-matrix:
    runs-on: ubuntu-latest
    outputs:
      set-matrix: ${{ steps.parse-build-targets.outputs.set-matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Parse build-targets.txt
        id: parse-build-targets
        run: python ./build/resolve-targets.py >> $GITHUB_OUTPUT

  build-target:
    runs-on: ubuntu-22.04 # Jammy
    needs: configure-matrix
    strategy:
      matrix: 
        target: ${{ fromJson(needs.configure-matrix.outputs.set-matrix) }}
    steps:
      # --- ENVIRONMENT SETUP ---
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check local source checksum
        run: echo "DYENV_LOCAL_SRC_CHECKSUM=${{ hashFiles(format('./src/{0}/', matrix.target)) }}" >> "$GITHUB_ENV"

      - name: Check deployed (remote) source checksum
        run: |
          export remote_checksum_status=$(curl -s -XGET "https://shingzhanho.github.io/HKU-Notes/files/${{ matrix.target }}/src-checksum.txt" \
           -o ./src/${{ matrix.target}}/remote-src-checksum.txt \
           -w "%{http_code}")
          if [ "${remote_checksum_status}" != "200" ]; then
            echo "Remote checksum returned status ${remote_checksum_status}. Rebuilding source."
            echo "DYENV_REMOTE_SRC_CHECKSUM=-1" >> "$GITHUB_ENV"
          else
            export remote_checksum=$(cat ./src/${{ matrix.target }}/remote-src-checksum.txt)
            echo "DYENV_REMOTE_SRC_CHECKSUM=${remote_checksum}" >> "$GITHUB_ENV"
          fi

      - name: Compare local and remote checksum
        run: |
          if [ "${{ env.DYENV_LOCAL_SRC_CHECKSUM }}" != "${{ env.DYENV_REMOTE_SRC_CHECKSUM }}" ]; then
            echo "Checksum mismatch. Proceeding with build."
            echo "GH_OUT_CHECKSUM_CHANGED=true" >> "$GITHUB_ENV"
            echo "DYENV_ABORT_WORKFLOW=false" >> "$GITHUB_ENV"
          else
            echo "Checksum match. Skipping build. Downloading compiled file from remote."
            mv ./src/${{ matrix.target }}/remote-src-checksum.txt ./src/${{ matrix.target }}/src-checksum.txt
            curl -XGET "https://shingzhanho.github.io/HKU-Notes/files/${{ matrix.target }}/compiled-at.txt" \
              -o ./src/${{ matrix.target }}/compiled-at.txt
            curl -XGET "https://shingzhanho.github.io/HKU-Notes/files/${{ matrix.target }}/${{ matrix.target }}.pdf" \
              -o ./src/${{ matrix.target }}/${{ matrix.target }}.pdf
            echo "GH_OUT_CHECKSUM_CHANGED=false" >> "$GITHUB_ENV"
            echo "DYENV_ABORT_WORKFLOW=true" >> "$GITHUB_ENV"
          fi

      - name: Set up Python
        if: ${{ env.DYENV_ABORT_WORKFLOW == 'false' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: ./build/python-requirement-lists/*.txt

      - name: Compute environment variables
        if: ${{ env.DYENV_ABORT_WORKFLOW == 'false' }}
        run: ./build/configure-env-vars.sh ${{ matrix.target }}

      # --- INSTALL MIKTEX DISTRIBUTION ---
      - name: Get APT dependencies list
        if: ${{ env.DYENV_ABORT_WORKFLOW == 'false' }}
        run: echo "DYENV_APT_DEPS_LIST=$(awk '{$1=$1}1' OFS=' ' RS='' ./build/apt-packages.txt)" >> "$GITHUB_ENV"

      - name: Configure MiKTeX repository key for APT
        if: ${{ env.DYENV_ABORT_WORKFLOW == 'false' }}
        run: |
          curl -fsSL https://miktex.org/download/key | gpg --dearmor | sudo tee /usr/share/keyrings/miktex-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/miktex-keyring.gpg] https://miktex.org/download/ubuntu jammy universe" | sudo tee /etc/apt/sources.list.d/miktex.list
          sudo apt-get update

      - name: Install MiKTeX and dependencies
        if: ${{ env.DYENV_ABORT_WORKFLOW == 'false' }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ${{ env.DYENV_APT_DEPS_LIST }}

      - name: Configure MiKTeX
        if: ${{ env.DYENV_ABORT_WORKFLOW == 'false' }}
        run: |
          miktexsetup finish
          initexmf --set-config-value [MPM]AutoInstall=1
          initexmf --enable-installer
          initexmf --update-fndb
          initexmf --mkmaps
          miktex packages update
          echo "PATH=$HOME/bin:$PATH" >> "$GITHUB_ENV"

      - name: Download MiKTeX packages cache identifier key
        if: env.DYENV_ABORT_WORKFLOW == 'false'
        run: |
          export miktex_remote_cache_key=$(curl -s -XGET "https://shingzhanho.github.io/HKU-Notes/files/${{ matrix.target }}/miktex-cache-key.txt" \
           -o ./src/${{ matrix.target}}/remote-miktex-cache-key.txt \
           -w "%{http_code}")
          if [ "${miktex_remote_cache_key}" != "200" ]; then
            echo "Remote MikTeX cache key returned status ${miktex_remote_cache_key}. Reinstalling packages."
            echo "DYENV_MIKTEX_CACHE_KEY=-1" >> "$GITHUB_ENV"
          else
            export miktex_cache_key=$(cat ./src/${{ matrix.target }}/remote-miktex-cache-key.txt)
            echo "DYENV_REMOTE_MIKTEX_CACHE_KEY=${miktex_cache_key}" >> "$GITHUB_ENV"
          fi

      - name: Calculate local MiKTeX cache key
        if: env.DYENV_ABORT_WORKFLOW == 'false'
        run: echo "DYENV_LOCAL_MIKTEX_CACHE_KEY=${{ hashFiles(env.DYENV_MIKTEX_PACKAGE_FILE) }}" >> "$GITHUB_ENV"

      - name: Compare local and remote MikTeX cache key
        if: env.DYENV_ABORT_WORKFLOW == 'false'
        run: |
          if [ "${{ env.DYENV_REMOTE_MIKTEX_CACHE_KEY }}" != "${{ env.DYENV_LOCAL_MIKTEX_CACHE_KEY }}" ]; then
            echo "MikTeX cache key mismatch. Proceeding with package installation."
            echo "DYENV_RESTORE_MIKTEX_FROM_CACHE=false" >> "$GITHUB_ENV"
          else
            echo "MikTeX cache key match. Trying to restore packages from cache."
            echo "DYENV_RESTORE_MIKTEX_FROM_CACHE=true" >> "$GITHUB_ENV"
          fi

      - name: Restore MiKTeX packages from cache
        id: restore-miktex-cache
        if: env.DYENV_ABORT_WORKFLOW == 'false' && env.DYENV_RESTORE_MIKTEX_FROM_CACHE == 'true'
        uses: actions/cache/restore@v4
        with:
          key: miktex-pkg-${{ runner.os }}-${{ env.DYENV_LOCAL_MIKTEX_CACHE_KEY }}
          path: ~/.miktex
        
      # --- CONFIGURE TOOLSETS ---
        # toolset for minted
      - name: Install Python minted toolset
        if: env.DYENV_REQUIRE_PYTHON_MINTED_PKGS == 'true' && env.DYENV_ABORT_WORKFLOW == 'false'
        run: pip install -r ./build/python-requirement-lists/python-minted-pkgs.txt

      # --- RUN PRE-BUILD COMMAND ---
      - name: Run pre-build command
        if: env.DYENV_ABORT_WORKFLOW == 'false' && env.DYENV_PREBUILD_COMMAND != ''
        run: ${{ env.DYENV_PREBUILD_COMMAND }}

      # --- BUILD TARGET ---
      - name: Build LaTeX target
        if: env.DYENV_ABORT_WORKFLOW == 'false'
        run: ${{ env.DYENV_BUILD_COMMAND }}

      # --- RUN POST-BUILD COMMAND ---
      - name: Run post-build command
        if: env.DYENV_ABORT_WORKFLOW == 'false' && env.DYENV_POSTBUILD_COMMAND != ''
        run: ${{ env.DYENV_POSTBUILD_COMMAND }}

      # --- CLEAN UP ---
      - name: Save MikTeX cache
        if: env.DYENV_ABORT_WORKFLOW == 'false'
        uses: actions/cache/save@v4
        with:
          key: miktex-pkg-${{ runner.os }}-${{ env.DYENV_LOCAL_MIKTEX_CACHE_KEY }}
          path: ~/.miktex

      - name: Generate files for deployment
        if: env.DYENV_ABORT_WORKFLOW == 'false'
        run: |
          echo "${{ env.DYENV_LOCAL_SRC_CHECKSUM }}" > ./src/${{ matrix.target }}/src-checksum.txt
          echo $(TZ='Asia/Hong_Kong' date +"%Y-%m-%d %H:%M:%S UTC+8 (Hong Kong)") > ./src/${{ matrix.target }}/compiled-at.txt
          echo "${{ env.DYENV_LOCAL_MIKTEX_CACHE_KEY }}" > ./src/${{ matrix.target }}/miktex-cache-key.txt

      - name: Upload artifacts
        if: env.DYENV_ABORT_WORKFLOW == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            ./src/${{ matrix.target }}/${{ matrix.target }}.pdf
            ./src/${{ matrix.target }}/src-checksum.txt
            ./src/${{ matrix.target }}/compiled-at.txt
            ./src/${{ matrix.target }}/miktex-cache-key.txt