###
#
# generate_sitemap.py
#
# This script generates a sitemap.xml file for the static site.
# The default one generated by MkDocs should be overridden.
#
# The sitemap.xml generated by this script includes the links to the generated PDFs.
#
###

import sys
from mttools import *
import os
from datetime import datetime

BASE_URL = "https://hku.jacobshing.com"

# Pages to be always included in the sitemap.
# These links should not have a <lastmod> tag.
STATIC_PATHS = [
    "/index.html",                                              # Home page
    "/contribution/index.html",                                 # Contribution pages
    "/contribution/syntax-reference/authors.json.html",
    "/contribution/syntax-reference/metadata.json.html",
    "/contribution/syntax-reference/build-targets.txt.html",
    "/downloads/index.html",                                    # Course catalogue page
    "/downloads/document-status.html",                          # Document status page
    "/preview-images-sitemap.xml",                              # Sitemap containing preview images
]

def main():
    sitemap_file = begin_sitemap()
    counter = 0

    for path in STATIC_PATHS:
        begin_url(sitemap_file, path)
        counter += 1
        end_url(sitemap_file)

    targets = sys.argv[1].split()

    for target in targets:
        reader = Reader(f"./src/{target}/metadata.json", target)
        metadata = reader.parse()

        # resolve for output file name
        output_file = metadata.output_file.get()

        # resolve for last modified datetime
        # use the most recently modified file in the target directory
        # time should be based on git commit time, not file system time
        lastmod = get_last_modified_datetime(target)

        if metadata.computed.is_alias.get():
            continue

        # detail page
        begin_url(sitemap_file, detail_page_url(target))
        counter += 1
        write_lastmod_and_changefreq(sitemap_file, lastmod)
        end_url(sitemap_file)
        
        if metadata.output_file.get() == "NON_FILE_TARGET":
            continue

        # pdf direct link
        begin_url(sitemap_file, pdf_direct_link(target, output_file))
        counter += 1
        write_lastmod_and_changefreq(sitemap_file, lastmod)
        end_url(sitemap_file)

    end_sitemap(sitemap_file)
    print(f"Generated sitemap.xml with {counter} URLs.")

    # Generate preview images sitemap
    counter = 0
    img_sitemap = begin_sitemap("preview-images-sitemap.xml")
    for target in targets:
        metadata = Reader(f"./src/{target}/metadata.json", target).parse()
        if not metadata.computed.is_pdf_target.get():
            continue

        lastmod = get_last_modified_datetime(target)

        # traverse through ./site/docs/downloads/details/{target}~preview/
        preview_dir = f"./site/docs/downloads/details/{target}~preview/"
        for img_file in [f for f in os.listdir(preview_dir) if f.endswith('.png')]:
            img_path = f"/docs/downloads/details/{target}~preview/{img_file}"
            begin_url(img_sitemap, img_path)
            counter += 1
            write_lastmod_and_changefreq(img_sitemap, lastmod)
            end_url(img_sitemap)
    end_sitemap(img_sitemap)
    print(f"Generated preview-images-sitemap.xml with {counter} URLs.")

def begin_sitemap(path: str | None = None):
    path = path if path else "sitemap.xml"
    f = open(path, "w")
    f.write('<?xml version="1.0" encoding="UTF-8"?>')
    f.write('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')
    print(f"Started {path} generation.")
    return f

def begin_url(f, loc: str):
    f.write("<url>")
    f.write(f"<loc>{BASE_URL}{loc}</loc>")
    print(f"\tStarted URL: {BASE_URL}{loc}")

def write_lastmod_and_changefreq(f, lastmod: str):
    f.write(f"<lastmod>{lastmod}</lastmod>")
    f.write("<changefreq>monthly</changefreq>")
    print(f"\t\tWrote lastmod: {lastmod}")

def end_url(f):
    f.write("</url>")
    print("\tEnded URL.")

def end_sitemap(f):
    f.write("</urlset>")
    print("Ended generation.")
    f.close()

def get_last_modified_datetime(target_name: str | None) -> str:
    target_path = f"./src/{target_name}" if target_name else "./src"
    
    # Get the latest git commit time for the entire directory
    git_time = os.popen(f'git log -1 --format=%ct -- "{target_path}"').read().strip()
    
    if git_time:
        latest_mtime = int(git_time)
    else:
        # Fallback to filesystem time if git history is unavailable
        latest_mtime = 0
        for root, _, files in os.walk(target_path):
            for file in files:
                file_path = os.path.join(root, file)
                mtime = os.path.getmtime(file_path)
                if mtime > latest_mtime:
                    latest_mtime = mtime
    
    # Convert to ISO 8601 format
    lastmod = datetime.fromtimestamp(latest_mtime).strftime("%Y-%m-%dT%H:%M:%S+00:00")
    return lastmod

def detail_page_url(target_name: str) -> str:
    DETAIL_PAGE_URL_PREFIX = "/downloads/details/{% TARGET_NAME %}.html"
    return DETAIL_PAGE_URL_PREFIX.replace("{% TARGET_NAME %}", target_name)

def pdf_direct_link(target_name: str, output_file_name: str) -> str:
    PDF_DIRECT_LINK_PREFIX = "/files/{% TARGET_NAME %}/{% OUTPUT_FILE_NAME %}"
    return PDF_DIRECT_LINK_PREFIX.replace("{% TARGET_NAME %}", target_name).replace("{% OUTPUT_FILE_NAME %}", output_file_name)

if __name__ == "__main__":
    main()
