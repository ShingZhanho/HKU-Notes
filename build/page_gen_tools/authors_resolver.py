from get_authors import Authors

def resolve_authors(authors_list: list[str]) -> list[str]:
    """
    Arrange and sort authors by specific rules:
        1. Main author (defined by prefix '!', if any) comes first.
        2. Remaining authors are:
            a. Sorted by display name (by default); or
            b. Shown as is if the pseudo-author '@do_not_sort' is present.
        3. The unknown author '@unknown' is at the end, if defined.

    Restrictions:
        1. Only one main author can be defined. Otherwise, ValueError is raised.
        2. Pseudo-authors beginning with '@' must not be defined as main author.
        3. Any pseudo-author not known to this function will raise ValueError.

    Returns:
        A list of resolved author handles in the correct order.
    """

    flag_do_not_sort = False
    flag_main_author_found = False
    cntr_unknown_authors = 0

    resolved_authors: list[str] = []
    authors_db = Authors()

    for author in authors_list:
        # handle pseudo-authors
        if author.startswith("@"):
            if author == "@do_not_sort":
                flag_do_not_sort = True
            elif author == "@unknown":
                cntr_unknown_authors += 1
            else:
                raise ValueError(f"Unknown pseudo-author: {author}")
            continue
    
        # handle normal authors
        is_main_author = author.startswith("!")
        author_handle = author
        if is_main_author and flag_main_author_found:
            raise ValueError("Multiple main authors defined.")
        if is_main_author and author_handle.startswith("@"):
            raise ValueError("Pseudo-authors cannot be defined as main author.")
        if is_main_author:
            flag_main_author_found = True
            resolved_authors.insert(0, author_handle)
            continue
        resolved_authors.append(author_handle)

    # sort authors if needed
    if not flag_do_not_sort:
        resolved_authors = (
            [resolved_authors[0]] +
            sorted(resolved_authors[1:], key=lambda x: authors_db.get_author_display_name(x))
        ) if flag_main_author_found else (
            sorted(resolved_authors, key=lambda x: authors_db.get_author_display_name(x))
        )

    # append unknown authors if any
    resolved_authors.extend(["@unknown"] * cntr_unknown_authors)

    # set default main author if none defined
    if not flag_main_author_found and resolved_authors:
        resolved_authors[0] = "!" + resolved_authors[0]

    return resolved_authors

def get_author_cards(authors_list: list[str]) -> list[str]:
    """
    Given a list of author handles, returns a list of corresponding one-line HTML
    tags representing author cards. You should only call this function with a list
    resolved by `resolve_authors()`.

    Pseudo-author @unknown will have the name "Unknown Author" (singular) if only one
    unknown author is present; otherwise, "Unknown Authors" (plural).
    """
    cntr_unknown_authors = authors_list.count("@unknown")
    authors_list = [a for a in authors_list if a != "@unknown"]
    author_cards: list[str] = []

    for author in authors_list:
        name_override = ("Unknown Author" + ("s" if cntr_unknown_authors > 1 else "")) if author == "@unknown" else None
        author_cards.append(__get_card(author, name_override))
    
    # Add unknown author cards if any
    if cntr_unknown_authors > 0:
        name_override = "Unknown Author" + ("s" if cntr_unknown_authors > 1 else "")
        author_cards.append(__get_card("@unknown", name_override))
    
    return author_cards
    
def __get_card(author_handle: str, name_override: str | None = None) -> str:
    """
    Generates a one-line HTML tag representing an author card for the given author handle.
    """
    authors_db = Authors()
    is_main_author = author_handle.startswith("!")
    author_handle = author_handle[1:] if author_handle.startswith("!") else author_handle
    author_name = name_override or authors_db.get_author_display_name(author_handle)
    author_avatar_url = authors_db.get_author_avatar(author_handle)
    author_href = authors_db.get_author_href(author_handle)

    return "".join((
        '<a class="author-card md-button',
        ' md-button--primary' if is_main_author else '',
        '" ',
        'title="You will be sent to a link provided by the author, ',
        'which may be an external website." ',
        f'href="{author_href}">',
        f'<img class="author-card__avatar" src="{author_avatar_url}" alt="Avatar of {author_name}">',
        f'<span class="author-card__name">{author_name}</span>',
        '</a>'
    ))

def write_authors_section(file_obj, author_cards: list[str]):
    """
    Writes the authors section to the given file object.
    The author cards should be generated by `get_author_cards()`.
    """
    file_obj.writelines([
        '<div class="author-card-container">\n',
        '<span><strong>Author(s):</strong></span>\n',
        '\n'.join(author_cards) + '\n',
        '</div>\n\n',
    ])

def get_authors_summary(authors_list: list[str]) -> str:
    """
    Given a list of author handles, returns a summary string of authors.
    For one author, returns the author's display name.
    For two authors, returns "Author1 and Author2".
    For three or more authors, returns "MainAuthor et al.".

    You should guarantee that the input list is already resolved by `resolve_authors()`.
    """
    authors_db = Authors()
    num_authors = len(authors_list)

    if num_authors == 1:
        author_handle = authors_list[0]
        return authors_db.get_author_display_name(author_handle)
    elif num_authors == 2:
        author1_handle = authors_list[0]
        author2_handle = authors_list[1]
        return f"{authors_db.get_author_display_name(author1_handle)} and {authors_db.get_author_display_name(author2_handle)}"
    else:
        main_author_handle = authors_list[0]
        return f"{authors_db.get_author_display_name(main_author_handle)} et al."